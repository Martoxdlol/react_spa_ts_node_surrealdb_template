import { Request, Response, NextFunction } from 'express'
import ExpressSession from 'express-session'
import { refreshUserInfoFromProviderTime } from 'shared/server_config'
import Surreal from 'surrealdb.js'
import { fetchUserInfo } from './auth'
import { db } from '../database/database'
import { SessionData } from '../util/util'

export class SurrealSessionStore extends ExpressSession.Store {
    constructor(client: Surreal, collectionName?: string) {
        super()
        this.client = client
        this.collectionName = collectionName || 'session'
    }
    private client: Surreal
    private collectionName: string

    // For some reason Surreal DB doesn't like some ids generated by express-session
    static encodeSID(sid: string) {
        return Buffer.from(sid).toString('base64').replace(/=/g, '_')
    }

    static decodeISD(sid: string) {
        return Buffer.from(sid.replace(/=/g, '_'), 'base64').toString('ascii')
    }

    destroy(sid: string, callback?: (err?: any) => void): void {
        sid = SurrealSessionStore.encodeSID(sid)
        this.client.delete(this.collectionName + ':' + sid).then(() => callback && callback())
    }

    async get(sid: string, callback: (err: any, session?: ExpressSession.SessionData | null) => void): Promise<void> {
        sid = SurrealSessionStore.encodeSID(sid)
        try {
            const result = await this.client.select(this.collectionName + ':' + sid) as any
            callback(null, result[0].session)
        } catch (error) {
            callback(null, undefined)
        }
    }


    set(sid: string, session: ExpressSession.SessionData, callback?: (err?: any) => void): void {
        this._set(sid, session, callback, false)
    }

    _set(sid: string, session: any, callback?: (err?: any) => void, updateTouched = false): void {
        sid = SurrealSessionStore.encodeSID(sid)
        const data = {
            session,
            created: new Date(),
            touched: new Date(),
        }

        if (updateTouched) {
            data.touched = new Date()
        }

        db.query(`UPDATE type::thing("session", $sid) MERGE $data;`, { sid, data }).then(_ => {
            callback && callback(null)
        })

        // db.query(`
        // BEGIN TRANSACTION;

        // IF ((select * from type::thing("session", $sid)) != []) THEN
        //     ( UPDATE type::thing("session", $sid) MERGE $data )
        // ELSE
        //     ( CREATE type::thing("session", $sid) CONTENT $data )
        // END;

        // COMMIT TRANSACTION;
        // `, { sid, data }).then(_ => {
        //     callback && callback(null)
        // })
    }

    touch(sid: string, session: ExpressSession.SessionData, callback?: () => void): void {
        this._set(sid, session, () => callback && callback(), true)
    }
}

const surrealStore = new SurrealSessionStore(db);

const session = ExpressSession({
    resave: false,
    secret: '1234',
    saveUninitialized: false,
    store: surrealStore,
})

export function sessionMiddleware(req: Request, res: Response, next: NextFunction) {
    session(req, res, async (...args) => {
        const tenYears = 1000 * 60 * 60 * 24 * 365 * 10
        if (req.session?.cookie) {
            req.session.cookie.expires = new Date(Date.now() + tenYears)
            req.session.cookie.maxAge = tenYears
        }
        const sessionData = (req.session as SessionData)
        if (sessionData.tokenSet && sessionData.lastUpdateFromServer && Date.now() - refreshUserInfoFromProviderTime > (new Date(sessionData.lastUpdateFromServer)).getTime()) {
            // Passed more than `refreshUserInfoFromProviderTime` millisenconds from last update
            if (sessionData.tokenSet) {
                fetchUserInfo(sessionData.tokenSet).then(userInfo => {
                    sessionData.userInfo = userInfo
                    req.session.save((err) => {
                        console.error("Error saving session")
                        console.error(err)
                        if (err) {
                            next(...args)
                        } else {
                            sessionData.lastUpdateFromServer = new Date()
                        }
                    })
                }).catch(err => {
                    console.error("Error fetching user info")
                    console.error(err)
                    next(...args)
                })
            } else {
                next(...args)
            }
        } else {
            next(...args)
        }
    })
}

